Q. What happens when you initialize a repository? Why do you need to do it?
When we initialize a repository on a specific directory, git creates an empty repository with no files to track or commit on. It just initializes the process.
Every git repository is linked to a specific directory. All the files in that directory and the subdirectories of that directory only can be contained in that 
repository. And sometimes its possible that git contain, or can keep track of, some of the files of that directory rather than all of them.
In order to keep track of all the files in that directory along with their commit history.

Q. How is the staging area different from the working directory and the repository? What value do you think it offers?
Staging area acts as a bridge between working directory and the repository. The changes(or files) you want to commit are first added to the staging area from 
the working directory, then these files are bundled into a single commit in the repository. It helps us to commit changes according to the principle of 
"one commit per logical change".

Q. How can you use the staging area to make sure you have one commit per logical change?
Since staging area consist of the most recent commit until any changes have been made to it, and if any change is made to file in staging area that is ready 
to be committed, we can actually find the diff between the two i.e in the staging area and the most recent commit with the help of 'git diff --staged', if we
see any logical change then we can commit with a logical message ofcourse otherwise no need to commit.

Q. What are some situations when branches would be helpful in keeping your history organised? How would branches help?
When you want to create another version of the same file with little modification so as to create a experimental version and not the release version, in such 
a case you can use another branch to try out that version without working with the master branch and hence keeping the history organised and intact. You can
always checkout the master branch and commit changes if any.    